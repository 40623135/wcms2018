<h1>CMSimfly</h1>
<p>動態網站:&nbsp; 以 <a href="https://www.heroku.com/">Heroku</a> 雲端應用服務建立</p>
<p><a href="http://wcms-scrum3.herokuapp.com/">http://wcms-scrum3.herokuapp.com/</a>&nbsp;</p>
<p>靜態網站:&nbsp; 以 Github Pages 服務建立</p>
<p><a href="http://mde.tw/wcms2018/cmsimfly">http://mde.tw/wcms2018/cmsimfly</a>&nbsp;</p><h2>基本功能</h2>
<p>動態功能:</p>
<p>以 python wsgi.py 啟動</p>
<p>在瀏覽器中管理網際檔案內容</p>
<p>利用瀏覽器上傳檔案 (可同時上傳多個檔案)</p>
<p>檔案包含一般常用數位檔案與影像檔案</p>
<p>使用者並可直接在瀏覽器的頁面編輯區中引用檔案或顯示圖形檔案</p>
<p>靜態網頁:</p>
<p>在近端以 python -m http.server 執行, 或在 Github Pages 模式下執行.</p><h1>學習 Python3</h1>
<p>CMSimfly 程式架構</p>
<p>CMSimfly 使用的 Python3 程式語法</p>
<p>CMSimfly 與機械設計</p>
<p>What about 網際資料庫: SQLite, MySQL 與 PostgreSQL</p>
<p>利用 PyGroup 進行第二階段的網際程式學習 (導入網際協同設計)</p>
<h2>機械設計</h2>
<p>機械設計專題分類:&nbsp;<a href="http://project.mde.tw/blog/yen-ji-jie-she-ji-zhuan-ti-fen-lei.html">http://project.mde.tw/blog/yen-ji-jie-she-ji-zhuan-ti-fen-lei.html</a>&nbsp;</p>
<p>為何現代人一定要會寫程式</p>
<p>因為</p>
<p>數位運算時代來了, 虛實整合已經發展到了一個地步, Why, 當每一部電影都需要 animation 團隊, 您在電影看到的許多畫面都是數位運算的結晶, 應該就能知道未來是虛實高度整合的世界.</p>
<p>客製化的程度已經到了一個大家都想出走, 都想 DIY 任何式物, 都想從虛實整合的世界中, 得到尊嚴, 讓機器作機器該作的是, 而人就只做人該做的事</p>
<p>你猜對了</p>
<p>大多數人都做不到, 因為他們都在作機器比較擅長的事</p>
<p>好了, 機器擅長做那一類的工作??</p>
<p>而且聽說機器有學習能力, 機器有深度學習能力, 機器有人工智慧.</p>
<p>您, 有沒有學習能力, 您有沒有深度學習能力, 您有沒有智慧.</p>
<p>好的 ,何謂智慧?</p>
<p>智者知黑白</p>
<p>慧者去私得智</p>
<p>所以, 智慧是知如何去私得智之黑白</p>
<h2>程式方法解題</h2>
<p>網際繪圖</p>
<p>好的, 我們能夠在網頁上畫一條直線, 我們能嗎?</p>
<p>當我們需要依照特定規律畫很多條線的時候, 我們會不會願意採用手工的方式一條一條畫?</p>
<p>當我們需要在一個工件上鑽很多孔, 假如這些孔的位置與大小有特定規律, 應該就可以利用程式方法來完成 - 效能是一個考量</p>
<p>假如這些孔的位置並沒有特定規律, 而是必須配合其他製程或功能設計考量而配置, 那麼該如何安排鑽孔次序, 這與典型的 Salesman &nbsp;problem 路徑安排類似, 請以 salesman problem 搜尋, 以便了解工程師該如何解決這個問題</p>
<p>工程師 Engineers 發明方法解決問題</p>
<p>人類還不會利用輪子提升物體移動效率之前, 要般動重物是非常辛苦的&nbsp;</p>
<p>好的, 現在有了輪子 (還知道如何運用流體的浮力, 特別注意, 力可以是阻力, 也可以是浮力, 端看如何巧妙應用), 但是我們這一堆人要重複製造輪子嗎?</p>
<p>機械者, 機巧之器械也!</p>
<p>請以重複造輪子搜尋, 看大家如何說?</p><h1>Flask 使用手冊</h1>
<p>Flask 手冊:</p>
<p><a href="https://media.readthedocs.org/pdf/flask/latest/flask.pdf">https://media.readthedocs.org/pdf/flask/latest/flask.pdf</a>&nbsp;</p>
<p>local <a href="/downloads/flask.pdf">flask.pdf</a> (表示 CMSimfly 的 downlosd 功能是正常的, 但是 downloads 則有問題!!</p>
<p>Micro 等級的 Python 網際程式框架指的是指保留核心基礎功能, 其他功能則以 plugin 附加</p>
<p>特性是模組化強, 功能較具彈性</p>
<p>Flask depends on two external libraries, Werkzeug and Jinja2.</p>
<p>Werkzeug is a toolkit for WSGI, the standard Python interface between web applications and a variety of servers for both development and deployment.</p>
<p>Jinja2 renders templates.</p>
<p>利用 pip 安裝 Flask</p>
<p>sudo pip install Flask</p>
<p>假如是在 Windows, 則要將 Python 安裝目錄下的 Scripts 設為指令搜尋路徑</p>
<p>最小執行程式設定</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
# 將檔案存成 simpleflask.py
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello World!'
if __name__ == '__main__':
    app.run()</pre>
<p>Flask 程式執行:</p>
<p>python simpleflask.py</p>
<p>然後以瀏覽器 <a>http://localhost:5000</a>&nbsp;擷取 Flask 程式回應內容</p>
<p>So what did that code do?</p>
<ol>
<li>First we imported the Flask class. An instance of this class will be our WSGI application.</li>
<li>&nbsp;Next we create an instance of this class. The first argument is the name of the application&rsquo;s module or package. If you are using a single module (as in this example), you should use __name__ because depending on if it&rsquo;s started as application or imported as module the name will be different ('__main__' versus the actual import name). This is needed so that Flask knows where to look for templates, static files, and so on.&nbsp;</li>
<li>We then use the route() decorator to tell Flask what URL should trigger our function.</li>
<li>The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user&rsquo;s browser.</li>
<li>Finally we use the run() function to run the local server with our application. The if __name__ == '__main__': makes sure the server only runs if the script is executed directly from the Python interpreter and not used as an imported module.</li>
<li>To stop the server, hit control-C.</li>
</ol><h1>圖檔展示</h1>
<p>以下為從 images 目錄引用的靜態圖片檔案:</p>
<p><img src="/images/gocycle4.png" alt="" width="587" height="471"></p>
<h2>動態繪圖</h2>
<p>利用&nbsp;<a href="https://github.com/fengari-lua/fengari-web">https://github.com/fengari-lua/fengari-web</a>&nbsp;</p>
<p>與&nbsp;<a href="https://www.arc.id.au/CanvasGraphics.html">https://www.arc.id.au/CanvasGraphics.html</a>&nbsp; 在網頁中進行正齒輪組囓合模擬.</p>
<p>
<script type="text/javascript" src="/static/Cango-13v08-min.js"></script>
<script type="text/javascript" src="/static/CangoAxes-4v01-min.js"></script>
<script type="text/javascript" src="/static/gearUtils-05.js"></script>
</p>
<p><canvas id="cango_gear" width="800" height="750"></canvas></p>
<p>
<script type="application/lua">
js = require "js"
window = js.global
Array = js.global.Array
canvas = window.document:getElementById("cango_gear")

-- 將 lua table 轉為 new JavaScript Object 的方法
-- e.g. Object{mykey="myvalue"}
function Object(t)
    local o = js.new(js.global.Object)
    for k, v in pairs(t) do
        assert(type(k) == "string" or js.typeof(k) == "symbol", "JavaScript only has string and symbol keys")
        o[k] = v
    end
    return o
end

-- javascript constructor
cgo = js.new(window.Cango, "cango_gear")
--local path = js.new(window.Path)
local shape = js.new(window.Shape)
-- Javascript 變數
shapedefs = window.shapeDefs
-- 角度轉為徑度
deg = math.pi/180

function cangoGear(m, n, pa)
    -- pr 為節圓半徑
    pr = n*m/2 -- gear Pitch radius
    data = js.new(window.createGearTooth, m, n, pa)
    gearTooth = js.new(window.Path, data, Object{
      fillColor= "#ddd0dd",
      border= true,
      strokeColor= "#606060" })
    gearTooth:rotate(180/n) -- rotate gear 1/2 tooth to mesh
    gear = gearTooth:dup()
    for i = 1, n-1 do
        newTooth = gearTooth:dup()
        newTooth:rotate(360*i/n)
        gear:appendPath(newTooth)
    end

    -- 建立軸孔
    hr = 0.6*pr -- diameter of gear shaft
    shaft = js.new(window.Path, shapedefs:circle(hr))
    gear:appendPath(shaft)
    return gear
end

n1 = 13
n2 = 24
n3 = 21
reduced_ratio = 0.5
-- 使用 80% 的畫布寬度
m = 0.8*(canvas.width)/((n1+n2+n3)*reduced_ratio)
cx = (canvas.width)/2
cy = (canvas.height)/2
-- 設定共同的壓力角
pa = 25
pr1 = n1*m/2
pr2 = n2*m/2
pr3 = n3*m/2
-- 建立 gear
gear1 = cangoGear(m, n1, pa)
gear2 = cangoGear(m, n2, pa)
gear3 = cangoGear(m, n3, pa)

deg = math.pi/180
rotate_speed = 12*deg

function draw()
    cgo:clearCanvas()

    gear1.transform:translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform:scale(reduced_ratio)
    gear1.transform:rotate(0)
    gear1:rotate(rotate_speed)
    cgo:render(gear1)
    
    gear2.transform:translate(cx, cy)
    gear2.transform:scale(reduced_ratio)
    gear2.transform:rotate(180+(360/n2/2))
    gear2:rotate(-(rotate_speed)*n1/n2)
    cgo:render(gear2)
    
    gear3.transform:translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform:scale(reduced_ratio)
    gear3.transform:rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3:rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo:render(gear3)
    print(gear1:toString())
end

--draw()
window:setInterval(draw, 2)
</script>
</p>
<h1>數學方程式</h1><p>當 $a \ne 0$, 一元二次方程式 (ax^2 + bx + c = 0) 有兩組解, 可以寫成: $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><p>上述原始碼為:</p><pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">當 $a \ne 0$, 一元二次方程式 (ax^2 + bx + c = 0) 有兩組解, 可以寫成: $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</pre><p>希臘字母:&nbsp;<a href="https://en.wikipedia.org/wiki/Greek_alphabet">https://en.wikipedia.org/wiki/Greek_alphabet</a>&nbsp;</p><p>&nbsp;</p>